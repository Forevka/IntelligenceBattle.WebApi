// <auto-generated />
using System;
using IntelligenceBattle.WebApi.Dal.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IntelligenceBattle.WebApi.Dal.Migrations
{
    [DbContext(typeof(PublicContext))]
    [Migration("20220528130240_InteliBattleDatabase")]
    partial class InteliBattleDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "en_US.utf8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.HasSequence("category_id_seq");

            modelBuilder.HasSequence("game_type_id_seq");

            modelBuilder.HasSequence("notification_id_seq");

            modelBuilder.HasSequence("notification_type_id_seq");

            modelBuilder.HasSequence("search_game_id_seq");

            modelBuilder.HasSequence("send_question_id_seq");

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsTrue")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.AnswerTranslation", b =>
                {
                    b.Property<int>("AnswerId")
                        .HasColumnType("integer");

                    b.Property<int>("LangId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("AnswerId", "LangId")
                        .HasName("AnswerTranslation_pkey");

                    b.HasIndex("LangId");

                    b.ToTable("AnswerTranslation");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.AuthorizationCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("AuthorizationCenter");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.AuthorizationProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AuthorizationProviderTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Key")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationProviderTypeId");

                    b.ToTable("AuthorizationProvider");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.AuthorizationProviderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AuthorizationProviderCenterId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationProviderCenterId");

                    b.ToTable("AuthorizationProviderType");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('category_id_seq'::regclass)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.CategoryTranslation", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("LangId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("CategoryId", "LangId")
                        .HasName("CategoryTranslation_pkey");

                    b.HasIndex("LangId");

                    b.ToTable("CategoryTranslation");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDatetime")
                        .HasPrecision(6)
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<int>("GameTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEnd")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GameTypeId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.GameQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("IsCurrent ");

                    b.HasKey("QuestionId", "GameId")
                        .HasName("GameQuestion_pkey");

                    b.HasIndex("GameId");

                    b.ToTable("GameQuestion");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.GameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('game_type_id_seq'::regclass)");

                    b.Property<int>("PlayerCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GameType");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.GameTypeTranslation", b =>
                {
                    b.Property<int>("GameTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("LangId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("GameTypeId", "LangId")
                        .HasName("GameTypeTranslation_pkey");

                    b.HasIndex("LangId");

                    b.ToTable("GameTypeTranslation");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.GameUser", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasPrecision(6)
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.HasKey("GameId", "UserId")
                        .HasName("GameUser_pkey");

                    b.HasIndex("ProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("GameUser");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.Lang", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Lang");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('notification_id_seq'::regclass)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('notification_type_id_seq'::regclass)");

                    b.Property<string>("Tittle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("NotificationType");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDatetime")
                        .HasPrecision(6)
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.QuestionTranslation", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("LangId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuestionId", "LangId")
                        .HasName("QuestionTranslation_pkey");

                    b.HasIndex("LangId");

                    b.ToTable("QuestionTranslation");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.SearchGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('search_game_id_seq'::regclass)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("GameTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("SearchGame");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.SendQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('send_question_id_seq'::regclass)");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("SendQuestion");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDatetime")
                        .HasPrecision(6)
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<int>("LangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.UserAnswer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDatetime")
                        .HasPrecision(6)
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("UserId", "GameId", "QuestionId")
                        .HasName("UserAnswer_pkey");

                    b.HasIndex("AnswerId");

                    b.HasIndex("GameId");

                    b.ToTable("UserAnswer");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.UserSecurity", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("AuthorizationCenterId")
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .HasColumnType("character varying");

                    b.Property<string>("Password")
                        .HasColumnType("character varying");

                    b.Property<int>("RealId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "AuthorizationCenterId")
                        .HasName("UserSecurity_pkey");

                    b.HasIndex("AuthorizationCenterId");

                    b.ToTable("UserSecurity");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.Answer", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("Answer_QuestionId_fkey")
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.AnswerTranslation", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Answer", "Answer")
                        .WithMany("AnswerTranslations")
                        .HasForeignKey("AnswerId")
                        .HasConstraintName("AnswerTranslation_AnswerId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Lang", "Lang")
                        .WithMany("AnswerTranslations")
                        .HasForeignKey("LangId")
                        .HasConstraintName("AnswerTranslation_LangId_fkey")
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Lang");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.AuthorizationProvider", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.AuthorizationProviderType", "AuthorizationProviderType")
                        .WithMany("AuthorizationProviders")
                        .HasForeignKey("AuthorizationProviderTypeId")
                        .HasConstraintName("AuthorizationProvider_AuthorizationProviderTypeId_fkey");

                    b.Navigation("AuthorizationProviderType");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.AuthorizationProviderType", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.AuthorizationCenter", "AuthorizationProviderCenter")
                        .WithMany("AuthorizationProviderTypes")
                        .HasForeignKey("AuthorizationProviderCenterId")
                        .HasConstraintName("AuthorizationProviderType_AuthorizationProviderCenterId_fkey")
                        .IsRequired();

                    b.Navigation("AuthorizationProviderCenter");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.CategoryTranslation", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("CategoryTranslation_CategoryId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Lang", "Lang")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("LangId")
                        .HasConstraintName("CategoryTranslation_LangId_fkey")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Lang");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.Game", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Category", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("Game_CategoryId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.GameType", "GameType")
                        .WithMany("Games")
                        .HasForeignKey("GameTypeId")
                        .HasConstraintName("Game_GameTypeId_fkey")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("GameType");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.GameQuestion", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Game", "Game")
                        .WithMany("GameQuestions")
                        .HasForeignKey("GameId")
                        .HasConstraintName("GameQuestion_GameId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Question", "Question")
                        .WithMany("GameQuestions")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("GameQuestion_QuestionId_fkey")
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.GameTypeTranslation", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.GameType", "GameType")
                        .WithMany("GameTypeTranslations")
                        .HasForeignKey("GameTypeId")
                        .HasConstraintName("GameTypeTranslation_GameTypeId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Lang", "Lang")
                        .WithMany("GameTypeTranslations")
                        .HasForeignKey("LangId")
                        .HasConstraintName("GameTypeTranslation_LangId_fkey")
                        .IsRequired();

                    b.Navigation("GameType");

                    b.Navigation("Lang");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.GameUser", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Game", "Game")
                        .WithMany("GameUsers")
                        .HasForeignKey("GameId")
                        .HasConstraintName("GameUser_GameId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.AuthorizationProvider", "Provider")
                        .WithMany("GameUsers")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("GameUser_ProviderId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.User", "User")
                        .WithMany("GameUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("GameUser_UserId_fkey")
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Provider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.Notification", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.AuthorizationProvider", "Provider")
                        .WithMany("Notifications")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("Notification_ProviderId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.NotificationType", "Type")
                        .WithMany("Notifications")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("Notification_TypeId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Notification_UserId_fkey")
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.Question", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Category", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("Question_CategoryId_fkey")
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.QuestionTranslation", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Lang", "Lang")
                        .WithMany("QuestionTranslations")
                        .HasForeignKey("LangId")
                        .HasConstraintName("QuestionTranslation_LangId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Question", "Question")
                        .WithMany("QuestionTranslations")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("QuestionTranslation_QuestionId_fkey")
                        .IsRequired();

                    b.Navigation("Lang");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.SearchGame", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Category", "Category")
                        .WithMany("SearchGames")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("SearchGame_CategoryId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.GameType", "GameType")
                        .WithMany("SearchGames")
                        .HasForeignKey("GameTypeId")
                        .HasConstraintName("SearchGame_GameTypeId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.AuthorizationProvider", "Provider")
                        .WithMany("SearchGames")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("SearchGame_ProviderId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.User", "User")
                        .WithMany("SearchGames")
                        .HasForeignKey("UserId")
                        .HasConstraintName("SearchGame_UserId_fkey")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("GameType");

                    b.Navigation("Provider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.SendQuestion", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Game", "Game")
                        .WithMany("SendQuestions")
                        .HasForeignKey("GameId")
                        .HasConstraintName("SendQuestion_GameId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.AuthorizationProvider", "Provider")
                        .WithMany("SendQuestions")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("SendQuestion_ProviderId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Question", "Question")
                        .WithMany("SendQuestions")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("SendQuestion_QuestionId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.User", "User")
                        .WithMany("SendQuestions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("SendQuestion_UserId_fkey")
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Provider");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.User", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Lang", "Lang")
                        .WithMany("Users")
                        .HasForeignKey("LangId")
                        .HasConstraintName("User_LangId_fkey")
                        .IsRequired();

                    b.Navigation("Lang");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.UserAnswer", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Answer", "Answer")
                        .WithMany("UserAnswers")
                        .HasForeignKey("AnswerId")
                        .HasConstraintName("UserAnswer_AnswerId_fkey");

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.Game", "Game")
                        .WithMany("UserAnswers")
                        .HasForeignKey("GameId")
                        .HasConstraintName("UserAnswer_GameId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.User", "User")
                        .WithMany("UserAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("UserAnswer_UserId_fkey")
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.UserSecurity", b =>
                {
                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.AuthorizationCenter", "AuthorizationCenter")
                        .WithMany("UserSecurities")
                        .HasForeignKey("AuthorizationCenterId")
                        .HasConstraintName("UserSecurity_AuthorizationCenterId_fkey")
                        .IsRequired();

                    b.HasOne("IntelligenceBattle.WebApi.Dal.Models.User", "User")
                        .WithMany("UserSecurities")
                        .HasForeignKey("UserId")
                        .HasConstraintName("UserSecurity_UserId_fkey")
                        .IsRequired();

                    b.Navigation("AuthorizationCenter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.Answer", b =>
                {
                    b.Navigation("AnswerTranslations");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.AuthorizationCenter", b =>
                {
                    b.Navigation("AuthorizationProviderTypes");

                    b.Navigation("UserSecurities");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.AuthorizationProvider", b =>
                {
                    b.Navigation("GameUsers");

                    b.Navigation("Notifications");

                    b.Navigation("SearchGames");

                    b.Navigation("SendQuestions");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.AuthorizationProviderType", b =>
                {
                    b.Navigation("AuthorizationProviders");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.Category", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("Games");

                    b.Navigation("Questions");

                    b.Navigation("SearchGames");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.Game", b =>
                {
                    b.Navigation("GameQuestions");

                    b.Navigation("GameUsers");

                    b.Navigation("SendQuestions");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.GameType", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("GameTypeTranslations");

                    b.Navigation("SearchGames");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.Lang", b =>
                {
                    b.Navigation("AnswerTranslations");

                    b.Navigation("CategoryTranslations");

                    b.Navigation("GameTypeTranslations");

                    b.Navigation("QuestionTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("GameQuestions");

                    b.Navigation("QuestionTranslations");

                    b.Navigation("SendQuestions");
                });

            modelBuilder.Entity("IntelligenceBattle.WebApi.Dal.Models.User", b =>
                {
                    b.Navigation("GameUsers");

                    b.Navigation("Notifications");

                    b.Navigation("SearchGames");

                    b.Navigation("SendQuestions");

                    b.Navigation("UserAnswers");

                    b.Navigation("UserSecurities");
                });
#pragma warning restore 612, 618
        }
    }
}
